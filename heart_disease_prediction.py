# -*- coding: utf-8 -*-
"""heart_disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WjwiRabX61Y5XO3OCTTNOP8uVat9JA1i
"""

# Details about the dataset
# Age : Age of the patient

# Sex : Sex of the patient

# exang: exercise induced angina (1 = yes; 0 = no)

# ca: number of major vessels (0-3)

# cp : Chest Pain type chest pain type

# Value 1: typical angina
# Value 2: atypical angina
# Value 3: non-anginal pain
# Value 4: asymptomatic

# trtbps : resting blood pressure (in mm Hg)

# chol : cholestoral in mg/dl fetched via BMI sensor

# fbs : (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)

# rest_ecg : resting electrocardiographic results

# Value 0: normal
# Value 1: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
# Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria
# thalach : maximum heart rate achieved

# target : 0= less chance of heart attack 1= more chance of heart attack

import pandas as pd
import numpy as np
df = pd.read_csv('/content/heart.csv')

df.head()

df.describe()
'''
1:Age:
Mean Age: 54.37 years
Range: 29 to 77 years
Insights: The dataset covers a broad age range, with most patients between 47.5 and 61 years (25th to 75th percentile). The mean age suggests that the sample includes primarily middle-aged to older adults.
2:Sex:
Mean: 0.68 (closer to 1)
Range: 0 (female) to 1 (male)
Insights: The dataset is skewed toward males, as the mean is closer to 1 and 75% of the data falls within 1 (male).
3: Chest Pain Type (cp):
Mean: 0.97 (indicating the majority of patients have lower values)
Range: 0 to 3 (representing different types of chest pain)
Insights: The chest pain types (0 to 3) seem fairly distributed, but most patients fall into the lower categories (type 0 and 1). The 50th percentile indicates that about half of the patients have type 0 or 1 chest pain.
4:Resting Blood Pressure (trtbps):
Mean: 131.62 mmHg
Range: 94 to 200 mmHg
Insights: The average blood pressure is 131.62 mmHg, which is slightly above the normal range (120 mmHg). Patients with blood pressure up to 140 mmHg are common (75th percentile), but extreme cases go as high as 200 mmHg.
5: Cholesterol (chol):
Mean: 246.26 mg/dL
Range: 126 to 564 mg/dL
Insights: The average cholesterol level is 246.26 mg/dL, which is above the desirable limit of 200 mg/dL, indicating many patients may have high cholesterol levels. The maximum cholesterol is exceptionally high (564 mg/dL), suggesting extreme cases in the dataset.
6:Fasting Blood Sugar (fbs)
Mean: 0.15
Range: 0 (normal) to 1 (high fasting blood sugar)
Insights: Most patients have normal fasting blood sugar, as indicated by the low mean (closer to 0) and the fact that 75% of the data has a value of 0.
7:Resting Electrocardiographic Results (restecg)
Mean: 0.53
Range: 0 to 2
Insights: Resting ECG results vary, but the most common value is 1, as seen from the 50th percentile, meaning that many patients have abnormal results. However, there are patients with normal and severe results (value 2).
8:Maximum Heart Rate Achieved (thalachh)
Mean: 149.65 bpm
Range: 71 to 202 bpm
Insights: The heart rate is mostly within a healthy range, but some extreme cases have very high heart rates, with a maximum of 202 bpm. The mean of around 150 bpm suggests that most patients can achieve a good heart rate during exercise.
9. Exercise-Induced Angina (exng)
Mean: 0.33 (closer to 0)
Range: 0 (no angina) to 1 (angina present)
Insights: The majority of patients do not experience exercise-induced angina, as reflected by the mean being closer to 0.
10:Oldpeak (ST depression induced by exercise)
Mean: 1.04
Range: 0.0 to 6.2
Insights: The mean ST depression is around 1, which is relatively mild. However, extreme values suggest severe cases with ST depression reaching 6.2.
11:Slope of the Peak Exercise ST Segment (slp)
Mean: 1.40
Range: 0 to 2
Insights: The slope of the ST segment is mostly around 1, which typically indicates a flat or upsloping ST segment (normal). Some patients may have downsloping segments (value 0), indicating possible heart issues.
12:Number of Major Vessels Colored by Fluoroscopy (caa)
Mean: 0.73
Range: 0 to 4
Insights: Most patients have 0 to 1 major vessels colored by fluoroscopy, with very few having 3 or 4 vessels, indicating that the majority of patients do not have significant blockages.
13:Thalassemia (thall)
Mean: 2.31
Range: 0 to 3
Insights: Thalassemia data indicates the majority of patients have a value of 2, meaning a fixed defect or reversible defect.
14:Output (Heart Disease Presence)
Mean: 0.54
Range: 0 (no heart disease) to 1 (heart disease)
Insights: The mean value of 0.54 suggests that around 54% of the patients in this dataset have heart disease, indicating a relatively balanced dataset with a slight skew toward patients with heart disease.

'''

"""General Insights:
The dataset contains a good distribution of age, blood pressure, and cholesterol levels, suggesting the presence of cardiovascular risk factors.
A slight male bias (68.3% male) is present.
Several features such as cholesterol, blood pressure, and maximum heart rate exhibit variability, indicating patients with both mild and severe heart conditions.
The dataset is fairly balanced regarding the target variable (output), with a slight tilt toward patients with heart disease
"""

df.info()
# no categorical dtypes

df.isna().sum()
# No null values

df.duplicated().sum()
# We have a duplicated value

# EDA
# Checking distribution of heart attack
import matplotlib.pyplot as plt
plt.style.use = 'ggplot'
import seaborn as sns
sns.countplot(data=df,x= 'output')
plt.title('Distribution of heart attack')
plt.show()
# slight class imabalance is noted

sns.countplot(data=df,x= 'sex')
plt.title('Distribution Of Gender')
plt.show()

# Create boxplots for each continuous feature
plt.figure(figsize=(12,8))
sns.boxplot(data=df)
plt.show()
# cholestrol and resting blood pressure has some outliers

from scipy import stats

# Calculate z-scores
z_scores = np.abs(stats.zscore(df))
outliers = (z_scores > 3)
outliers.sum()  # Count of outliers in each column
# 1.Resting Blood Pressure (trtbps): 2 outliers

# These could represent patients with unusually high or low blood pressure values compared to the rest of the population.
# 2.Cholesterol (chol): 4 outliers

# There are 4 extreme cholesterol levels, potentially indicating very high-risk individuals for heart-related issues.
# 3.Maximum Heart Rate Achieved (thalachh): 1 outlier

# One patient has an unusually high or low maximum heart rate during exercise.
# 4.Oldpeak: 2 outliers

# These are patients who have extreme ST depression induced by exercise, which may suggest more severe heart conditions.
# 5.Number of Major Vessels Colored by Fluoroscopy (caa): 5 outliers

# This column has 5 outliers, possibly indicating patients with more severe or less common patterns of blocked vessels.
# 6.Thalassemia (thall): 2 outliers

# Two outliers may indicate patients with particularly rare or severe forms of thalassemia.

plt.figure(figsize=(14,12))
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

X = df.drop("output", axis=1)
y = df["output"]
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# model training
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Initialize and train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Print the classification report for precision, recall, f1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()